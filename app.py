import re

def read_students_from_md(filename):
    """–ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏–∑ markdown —Ñ–∞–π–ª–∞"""
    students = []
    try:
        with open(filename, 'r', encoding='utf-8') as file:
            lines = file.readlines()
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –Ω–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        for line in lines:
            if '|' in line and line.strip() and '–§–ò–û' not in line and '---' not in line:
                parts = [part.strip() for part in line.split('|') if part.strip()]
                if len(parts) >= 5:
                    students.append({
                        'full_name': parts[0],
                        'group': parts[1],
                        'college': parts[2],
                        'admission_year': int(parts[3]),
                        'course': int(parts[4])
                    })
                    
    except FileNotFoundError:
        print(f"–û—à–∏–±–∫–∞: –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        
    return students

def find_student(students, full_name):
    """–ò—â–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ –§–ò–û"""
    for student in students:
        if student['full_name'].lower() == full_name.lower():
            return student
    return None

def generate_greeting(student):
    """–°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏"""
    current_year = 2024
    years_studying = current_year - student['admission_year'] + 1
    
    greeting = f"\nüéì –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {student['full_name']}!"
    greeting += f"\n{'='*50}"
    greeting += f"\nüìä –í–∞—à–∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:"
    greeting += f"\n‚îú‚îÄ üè´ –ö–æ–ª–ª–µ–¥–∂: {student['college']}"
    greeting += f"\n‚îú‚îÄ üë• –ì—Ä—É–ø–ø–∞: {student['group']}"
    greeting += f"\n‚îú‚îÄ üìÖ –ì–æ–¥ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è: {student['admission_year']}"
    greeting += f"\n‚îú‚îÄ üìö –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: {student['course']}"
    greeting += f"\n‚îî‚îÄ ‚è±Ô∏è –õ–µ—Ç –æ–±—É—á–µ–Ω–∏—è: {years_studying}"
    
    if student['course'] == 1:
        greeting += f"\n\nüåü –í—ã —Ç–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞–µ—Ç–µ —Å–≤–æ–π –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å!"
    elif student['course'] >= 3:
        greeting += f"\n\nüéØ –í—ã —É–∂–µ –æ–ø—ã—Ç–Ω—ã–π —Å—Ç—É–¥–µ–Ω—Ç! –°–∫–æ—Ä–æ –¥–∏–ø–ª–æ–º!"
    
    return greeting

def display_student_info(student):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—É–¥–µ–Ω—Ç–µ"""
    greeting = generate_greeting(student)
    print(greeting)

def register_new_student(full_name, students, filename):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    print(f"\n‚ùå –°—Ç—É–¥–µ–Ω—Ç {full_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
    response = input("–•–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è? (–¥–∞/–Ω–µ—Ç): ").lower().strip()
    
    if response == '–¥–∞':
        try:
            print("\nüìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞:")
            group = input("–í–≤–µ–¥–∏—Ç–µ —É—á–µ–±–Ω—É—é –≥—Ä—É–ø–ø—É: ")
            college = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–¥–∂–∞: ")
            admission_year = int(input("–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è: "))
            course = int(input("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å: "))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
            if admission_year < 2000 or admission_year > 2024:
                print("‚ùå –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è")
                return None
            if course < 1 or course > 6:
                print("‚ùå –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫—É—Ä—Å–∞")
                return None
            
            new_student = {
                'full_name': full_name,
                'group': group,
                'college': college,
                'admission_year': admission_year,
                'course': course
            }
            students.append(new_student)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ñ–∞–π–ª
            with open(filename, 'a', encoding='utf-8') as file:
                file.write(f"\n| {full_name} | {group} | {college} | {admission_year} | {course} |")
            
            print("‚úÖ –°—Ç—É–¥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
            return new_student
            
        except ValueError:
            print("‚ùå –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
    
    return None

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
    –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: –¢–∞—Ç–∞—Ä–∏–Ω–æ–≤ –í—è—á–µ—Å–ª–∞–≤ –°–µ—Ä–≥–µ–µ–≤–∏—á
    """
    filename = 'students.md'
    students = read_students_from_md('students.md')
    
    print("üéì –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏")
    print("=" * 50)
    print("–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: –¢–∞—Ç–∞—Ä–∏–Ω–æ–≤ –í—è—á–µ—Å–ª–∞–≤ –°–µ—Ä–≥–µ–µ–≤–∏—á")
    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
    print("‚Ä¢ –í–≤–µ–¥–∏—Ç–µ –§–ò–û —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞")
    print("‚Ä¢ '—Å–ø–∏—Å–æ–∫' - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
    print("‚Ä¢ '–≤—ã—Ö–æ–¥' - –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É")
    
    while True:
        print("\n" + "-" * 30)
        user_input = input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: ").strip()
        
        if user_input.lower() == '–≤—ã—Ö–æ–¥':
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        elif user_input.lower() == '—Å–ø–∏—Å–æ–∫':
            print("\nüìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:")
            for i, student in enumerate(students, 1):
                print(f"{i}. {student['full_name']} - {student['group']}")
        else:
            student = find_student(students, user_input)
            
            if student:
                display_student_info(student)
            else:
                new_student = register_new_student(user_input, students, filename)
                if new_student:
                    display_student_info(new_student)

if __name__ == "__main__":
    main()